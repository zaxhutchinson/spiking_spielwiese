#include<iostream>
#include<string>
#include<chrono>
#include<thread>
#include<cmath>
#include<random>

#include<SFML/Graphics.hpp>

#include"spspdef.hpp"
#include"Neuron.hpp"
#include"Synapse.hpp"
#include"NTemplate.hpp"

using namespace spsp;
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
struct Resource {
    double output;
    std::string material_name;
};

struct Warehouse;
struct Mine {
    float x;
    float y;
    sptr<Neuron> miners;
    sptr<SimpleSynapse> operations;
    sptr<PCSynapse> warehouse;
    sptr<Resource> resource;

    Mine(sptr<NeuronTemplates> nt, sptr<Resource> res) {
        resource = res;
        miners = std::make_shared<Neuron>(nt->GetNeuronTemplate("RegularSpiking"));
        operations = std::make_shared<SimpleSynapse>(1.0);
        miners->AddInputSynapse(operations);
    }

    void Update() {
        operations->SetSignal(resource->output);
    }
    void ChangeOperationAmount(double amt) {
        operations->SetWeight(amt);
    }
    void SetWarehouse(sptr<PCSynapse> wh) {
        warehouse = wh;
    }
};
struct Warehouse {
    float x;
    float y;
    lsptr<PCSynapse> materials;
};

///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
